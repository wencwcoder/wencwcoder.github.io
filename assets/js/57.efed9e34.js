(window.webpackJsonp=window.webpackJsonp||[]).push([[57],{476:function(t,s,a){"use strict";a.r(s);var e=a(1),n=Object(e.a)({},(function(){var t=this,s=t._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h2",{attrs:{id:"_1-杂记"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-杂记"}},[t._v("#")]),t._v(" 1. 杂记")]),t._v(" "),s("h3",{attrs:{id:"数据驱动-mvvm"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#数据驱动-mvvm"}},[t._v("#")]),t._v(" 数据驱动 MVVM")]),t._v(" "),s("ul",[s("li",[t._v("MVVM "),s("code",[t._v("表示的是")]),t._v(" Model-View-ViewModel：【1】Model：模型层，负责处理业务逻辑以及和服务器端进行交互；【2】View：视图层：负责将数据模型转化为 UI 展示出来，可以简单的理解为HTML页面；【3】ViewModel：视图模型层，用来连接 Model 和 View，是 Model 和 View 之间的通信桥梁。")]),t._v(" "),s("li",[t._v("双向绑定：ViewModel 它的主要职责就是：数据变化后更新视图、视图变化后更新数据。")])]),t._v(" "),s("h3",{attrs:{id:"双向绑定的原理"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#双向绑定的原理"}},[t._v("#")]),t._v(" 双向绑定的原理")]),t._v(" "),s("ul",[s("li",[t._v("vue2 是采用"),s("strong",[t._v("数据劫持结合发布者-订阅者模式")]),t._v("的方式，通过 "),s("strong",[t._v("Object.defineProperty()")]),t._v(" 来劫持各个属性的setter，getter，在数据变动时发布消息给订阅者，触发相应的监听回调。vue3 中则采用 "),s("strong",[t._v("Proxy")]),t._v("，它可以监听到数组内的数据变化。")])]),t._v(" "),s("h3",{attrs:{id:"生命周期"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#生命周期"}},[t._v("#")]),t._v(" 生命周期")]),t._v(" "),s("ul",[s("li",[t._v("生命周期 "),s("code",[t._v("Life Cycle")]),t._v(" 的概念应用很广泛，特别是在政治、经济、环境、技术、社会等诸多领域经常出现，其基本涵义可以通俗地理解为 “从摇篮到坟墓” "),s("code",[t._v("Cradle-to-Grave")]),t._v(" 的整个过程。在 "),s("code",[t._v("Vue")]),t._v(" 中实例从创建到销毁的过程就是生命周期，即指从创建、初始化数据、编译模板、挂载 Dom→渲染、更新→渲染、卸载等一系列过程。")]),t._v(" "),s("li",[t._v("Vue生命周期总共可以分为 8 个阶段：创建前后、载入前后、更新前后、销毁前后，以及一些特殊场景的生命周期（activated、deactivated、errorCaptured）。")]),t._v(" "),s("li",[t._v("数据请求建议放在 "),s("code",[t._v("created")]),t._v(" 生命周期当中。")])]),t._v(" "),s("h3",{attrs:{id:"v-show-和-v-if"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#v-show-和-v-if"}},[t._v("#")]),t._v(" v-show 和 v-if")]),t._v(" "),s("ul",[s("li",[t._v("控制手段不同："),s("code",[t._v("v-show")]),t._v(" 隐藏则是为该元素添加 "),s("code",[t._v("css--display:none")]),t._v("，"),s("code",[t._v("dom")]),t._v(" 元素依旧还在。"),s("code",[t._v("v-if")]),t._v(" 显示隐藏是将 "),s("code",[t._v("dom")]),t._v(" 元素整个添加或删除。")]),t._v(" "),s("li",[t._v("编译过程不同："),s("code",[t._v("v-if")]),t._v(" 切换有一个局部编译 / 卸载的过程，切换过程中合适地销毁和重建内部的事件监听和子组件；"),s("code",[t._v("v-show")]),t._v(" 只是简单的基于 css 切换。")]),t._v(" "),s("li",[t._v("编译条件不同："),s("code",[t._v("v-if")]),t._v(" 是真正的条件渲染，它会确保在切换过程中条件块内的事件监听器和子组件适当地被销毁和重建。"),s("code",[t._v("v-if")]),t._v(" 的变化会触发组件的生命周期，"),s("code",[t._v("v-show")]),t._v(" 的变化则不会触发组件的生命周期。")]),t._v(" "),s("li",[t._v("性能消耗不同："),s("code",[t._v("v-if")]),t._v(" 有更高的切换消耗；"),s("code",[t._v("v-show")]),t._v(" 有更高的初始渲染消耗。")])]),t._v(" "),s("h3",{attrs:{id:"组件-vs-插件"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#组件-vs-插件"}},[t._v("#")]),t._v(" 组件 vs 插件")]),t._v(" "),s("ul",[s("li",[t._v("组件的定义：组件就是把图形、非图形的各种逻辑均抽象为一个统一的概念（组件）来实现开发的模式，在 "),s("code",[t._v("Vue")]),t._v(" 中每一个 "),s("code",[t._v(".vue")]),t._v(" 文件都可以视为一个组件。组件的优势：降低整个系统的耦合度、调试方便、提高可维护性。")]),t._v(" "),s("li",[t._v("插件是什么：插件通常用来为 "),s("code",[t._v("Vue")]),t._v(" 添加全局功能。插件的功能范围没有严格的限制，一般有下面几种：【1】添加全局方法或者属性。如 "),s("code",[t._v("vue-custom-element")]),t._v("；【2】添加全局资源：指令 / 过滤器 / 过渡等。如 "),s("code",[t._v("vue-touch")]),t._v("；【3】通过全局混入来添加一些组件选项。如 "),s("code",[t._v("vue-router")]),t._v("；【4】添加 "),s("code",[t._v("Vue")]),t._v(" 实例方法，通过把它们添加到 "),s("code",[t._v("Vue.prototype")]),t._v(" 上实现。")]),t._v(" "),s("li",[t._v("区别：编写形式、注册形式、使用场景（组件 "),s("code",[t._v("(Component)")]),t._v(" 是用来构成你的 "),s("code",[t._v("App")]),t._v(" 的"),s("strong",[t._v("业务模块")]),t._v("，它的目标是 "),s("code",[t._v("App.vue")]),t._v("；插件 "),s("code",[t._v("(Plugin)")]),t._v(" 是用来增强你的技术栈的"),s("strong",[t._v("功能模块")]),t._v("，它的目标是 "),s("code",[t._v("Vue")]),t._v(" 本身）。")])]),t._v(" "),s("h3",{attrs:{id:"为什么-data-属性是一个函数而不是一个对象"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#为什么-data-属性是一个函数而不是一个对象"}},[t._v("#")]),t._v(" 为什么 data 属性是一个函数而不是一个对象")]),t._v(" "),s("ul",[s("li",[t._v("根实例对象 "),s("code",[t._v("data")]),t._v(" 可以是对象也可以是函数（根实例是单例），不会产生数据污染情况。")]),t._v(" "),s("li",[t._v("组件实例对象 "),s("code",[t._v("data")]),t._v(" 必须为函数，目的是为了防止多个组件实例对象之间共用一个 "),s("code",[t._v("data")]),t._v("，产生数据污染。采用函数的形式，"),s("code",[t._v("initData")]),t._v(" 时会将其作为工厂函数都会返回全新 "),s("code",[t._v("data")]),t._v(" 对象。")])]),t._v(" "),s("h3",{attrs:{id:"计算属性注意事项"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#计算属性注意事项"}},[t._v("#")]),t._v(" 计算属性注意事项")]),t._v(" "),s("ul",[s("li",[t._v("计算属性值会基于其响应式依赖被"),s("strong",[t._v("缓存")]),t._v("。")]),t._v(" "),s("li",[t._v("计算属性仅会在其"),s("strong",[t._v("响应式依赖更新")]),t._v("时才重新计算。")])]),t._v(" "),s("div",{staticClass:"language-javascript line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 解释了为什么下面的计算属性永远不会更新，因为 Date.now() 并不是一个响应式依赖")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" now "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("computed")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" Date"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("now")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br")])]),s("ul",[s("li",[t._v("在计算属性中使用 "),s("code",[t._v("reverse()")]),t._v(" 和 "),s("code",[t._v("sort()")]),t._v(" 的时候务必小心！这两个方法将变更原始数组，计算函数中不应该这么做。请在调用这些方法之前创建一个原数组的副本：")])]),t._v(" "),s("div",{staticClass:"language-javascript line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" numbers"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("reverse")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),t._v("numbers"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("reverse")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br")])]),s("h3",{attrs:{id:"key-的作用"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#key-的作用"}},[t._v("#")]),t._v(" key 的作用")]),t._v(" "),s("ul",[s("li",[t._v("diff 算法简单的说就是"),s("strong",[t._v("新旧虚拟 DOM")]),t._v(" 的比较，如果有差异就以新的为准，然后再插入的真实的 DOM 中，重新渲染。")]),t._v(" "),s("li",[t._v("key 的作用：主要是为了更高效的对比虚拟 DOM 中每个节点是否是相同节点。")]),t._v(" "),s("li",[t._v("key 的取值：使用数据库中的 id、自增 id 函数、使用 uuid 库。")])]),t._v(" "),s("h3",{attrs:{id:"vue-实例挂载的过程"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#vue-实例挂载的过程"}},[t._v("#")]),t._v(" Vue 实例挂载的过程")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("new Vue")]),t._v(" 的时候：【1】调用会调用 "),s("code",[t._v("_init")]),t._v(" 方法：定义 "),s("code",[t._v("$set")]),t._v("、"),s("code",[t._v("$get")]),t._v(" 、"),s("code",[t._v("$delete")]),t._v("、"),s("code",[t._v("$watch")]),t._v(" 等方法；定义 "),s("code",[t._v("$on")]),t._v("、"),s("code",[t._v("$off")]),t._v("、"),s("code",[t._v("$emit")]),t._v("、"),s("code",[t._v("$off")]),t._v("等事件；定义 "),s("code",[t._v("_update")]),t._v("、"),s("code",[t._v("$forceUpdate")]),t._v("、"),s("code",[t._v("$destroy")]),t._v("生命周期。【2】调用 "),s("code",[t._v("$mount")]),t._v(" 进行页面的挂载，挂载的时候主要是通过 "),s("code",[t._v("mountComponent")]),t._v(" 方法。【3】定义 "),s("code",[t._v("updateComponent")]),t._v(" 更新函数。【4】执行 "),s("code",[t._v("render")]),t._v(" 生成虚拟 "),s("code",[t._v("DOM")]),t._v("。【5】"),s("code",[t._v("_update")]),t._v(" 将虚拟 "),s("code",[t._v("DOM")]),t._v(" 生成真实 "),s("code",[t._v("DOM")]),t._v(" 结构，并且渲染到页面中。")])]),t._v(" "),s("h3",{attrs:{id:"nexttick"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#nexttick"}},[t._v("#")]),t._v(" nextTick")]),t._v(" "),s("ul",[s("li",[t._v("是什么：官方对其的定义，在下次 DOM 更新循环结束之后执行延迟回调。在修改数据之后立即使用这个方法，"),s("strong",[t._v("获取更新后的 DOM")]),t._v("。"),s("code",[t._v("Vue")]),t._v(" 在更新 "),s("code",[t._v("DOM")]),t._v(" 时是异步执行的。当数据发生变化，"),s("code",[t._v("Vue")]),t._v(" 将开启一个异步更新队列，视图需要等队列中所有数据变化完成之后，再统一进行更新。")])]),t._v(" "),s("h3",{attrs:{id:"mixin"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#mixin"}},[t._v("#")]),t._v(" mixin")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("Mixin")]),t._v(" 是面向对象程序设计语言中的类，提供了方法的实现。其他类可以访问 "),s("code",[t._v("mixin")]),t._v(" 类的方法而不必成为其子类。"),s("code",[t._v("Mixin")]),t._v(" 类通常作为功能模块使用，在需要该功能时 “混入”，有利于代码复用又避免了多继承的复杂。")]),t._v(" "),s("li",[t._v("Vue 中的 mixin："),s("code",[t._v("mixin")]),t._v("（混入），提供了一种非常灵活的方式，来分发 "),s("code",[t._v("Vue")]),t._v(" 组件中的可复用功能。本质其实就是一个 "),s("code",[t._v("js")]),t._v(" 对象，它可以包含我们组件中任意功能选项，如 "),s("code",[t._v("data")]),t._v("、"),s("code",[t._v("components")]),t._v("、"),s("code",[t._v("methods")]),t._v("、"),s("code",[t._v("created")]),t._v("、"),s("code",[t._v("computed")]),t._v(" 等等。"),s("strong",[t._v("全局混入常用于插件的编写")]),t._v("。")]),t._v(" "),s("li",[t._v("注意事项：当组件存在与 "),s("code",[t._v("mixin")]),t._v(" 对象相同的选项的时候，进行递归合并的时候，组件的选项会覆盖 "),s("code",[t._v("mixin")]),t._v(" 的选项；但是如果相同选项为生命周期钩子的时候，会合并成一个数组，先执行 "),s("code",[t._v("mixin")]),t._v(" 的钩子，再执行组件的钩子。")]),t._v(" "),s("li",[t._v("几种混入策略：【1】"),s("strong",[t._v("替换型策略")]),t._v("有 "),s("code",[t._v("props")]),t._v("、"),s("code",[t._v("methods")]),t._v("、"),s("code",[t._v("inject")]),t._v("、"),s("code",[t._v("computed")]),t._v("，就是将新的同名参数替代旧的参数；【2】"),s("strong",[t._v("合并型策略")]),t._v("是 "),s("code",[t._v("data")]),t._v("，通过 "),s("code",[t._v("set")]),t._v(" 方法进行合并和重新赋值；【3】"),s("strong",[t._v("队列型策略")]),t._v("有生命周期函数和 "),s("code",[t._v("watch")]),t._v("，原理是将函数存入一个数组，然后正序遍历依次执行；【4】"),s("strong",[t._v("叠加型策略")]),t._v("有 "),s("code",[t._v("component")]),t._v("、"),s("code",[t._v("directives")]),t._v("、"),s("code",[t._v("filters")]),t._v("，通过原型链进行层层的叠加。")])]),t._v(" "),s("h3",{attrs:{id:"slot"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#slot"}},[t._v("#")]),t._v(" slot")]),t._v(" "),s("ul",[s("li",[t._v("使用场景：通过插槽可以让用户可以"),s("strong",[t._v("拓展组件")]),t._v("，去更好地"),s("strong",[t._v("复用组件")]),t._v("和对其做"),s("strong",[t._v("定制化处理")]),t._v("。")]),t._v(" "),s("li",[t._v("分类：默认插槽、具名插槽、作用域插槽。")])]),t._v(" "),s("h3",{attrs:{id:"observable"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#observable"}},[t._v("#")]),t._v(" observable")]),t._v(" "),s("ul",[s("li",[t._v("在 "),s("code",[t._v("Vue")]),t._v(" 中的定义："),s("code",[t._v("Vue.observable")]),t._v("，"),s("strong",[t._v("让一个对象变成响应式数据")]),t._v("。"),s("code",[t._v("Vue")]),t._v(" 内部会用它来处理 "),s("code",[t._v("data")]),t._v(" 函数返回的对象。返回的对象可以直接用于渲染函数和计算属性内，并且会在发生变更时触发相应的更新。也"),s("strong",[t._v("可以作为最小化的跨组件状态存储器")]),t._v("。")])]),t._v(" "),s("div",{staticClass:"language-javascript line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[t._v("Vue"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("observable")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("count")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 其作用等同于")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("vue")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("count")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br")])]),s("ul",[s("li",[t._v("在 "),s("code",[t._v("Vue 2.x")]),t._v(" 中，被传入的对象会直接被 "),s("code",[t._v("Vue.observable")]),t._v(" 变更，它和被返回的对象是同一个对象；在 "),s("code",[t._v("Vue 3.x")]),t._v(" 中，则会返回一个可响应的代理，而对源对象直接进行变更仍然是不可响应的。")]),t._v(" "),s("li",[t._v("使用场景：在非父子组件通信时，可以使用通常的 "),s("code",[t._v("bus")]),t._v(" 或者使用 "),s("code",[t._v("vuex")]),t._v("，但是实现的功能不是太复杂，而使用上面两个又有点繁琐。这时，"),s("code",[t._v("observable")]),t._v(" 就是一个很好的选择。")])]),t._v(" "),s("h3",{attrs:{id:"keep-alive"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#keep-alive"}},[t._v("#")]),t._v(" keep-alive")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("keep-alive")]),t._v(" 是 vue 中的内置组件，能在组件切换过程中"),s("strong",[t._v("将状态保留在内存中")]),t._v("，防止重复渲染 DOM。"),s("code",[t._v("keep-alive")]),t._v(" 包裹动态组件时，会缓存不活动的组件实例，而不是销毁它们。可以设置以下 "),s("code",[t._v("props")]),t._v(" 属性：【1】"),s("code",[t._v("include")]),t._v(" - 字符串或正则表达式。只有名称匹配的组件会被缓存；【2】"),s("code",[t._v("exclude")]),t._v(" - 字符串或正则表达式。任何名称匹配的组件都不会被缓存；【3】"),s("code",[t._v("max")]),t._v(" - 数字。最多可以缓存多少组件实例。")])]),t._v(" "),s("div",{staticClass:"language-vue line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-vue"}},[s("code",[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("keep-alive")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("include")]),s("span",{pre:!0,attrs:{class:"token attr-value"}},[s("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("a, b"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("component")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v(":is")]),s("span",{pre:!0,attrs:{class:"token attr-value"}},[s("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("view"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("component")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("keep-alive")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("div")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("id")]),s("span",{pre:!0,attrs:{class:"token attr-value"}},[s("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("app"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),t._v(" "),s("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("class")]),s("span",{pre:!0,attrs:{class:"token attr-value"}},[s("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("wrapper"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("keep-alive")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("\x3c!-- 需要缓存的视图组件 --\x3e")]),t._v(" \n    "),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("router-view")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("v-if")]),s("span",{pre:!0,attrs:{class:"token attr-value"}},[s("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("$route.meta.keepAlive"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("router-view")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("keep-alive")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n    \n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("\x3c!-- 不需要缓存的视图组件 --\x3e")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("router-view")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("v-if")]),s("span",{pre:!0,attrs:{class:"token attr-value"}},[s("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("!$route.meta.keepAlive"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("router-view")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("div")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br"),s("span",{staticClass:"line-number"},[t._v("12")]),s("br"),s("span",{staticClass:"line-number"},[t._v("13")]),s("br")])]),s("ul",[s("li",[t._v("缓存后如何获取数据：beforeRouteEnter、actived。")])]),t._v(" "),s("h3",{attrs:{id:"修饰符"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#修饰符"}},[t._v("#")]),t._v(" 修饰符")]),t._v(" "),s("ul",[s("li",[t._v("在程序世界里，修饰符是用于限定类型以及类型成员的声明的一种符号。在 "),s("code",[t._v("Vue")]),t._v(" 中，修饰符处理了许多 "),s("code",[t._v("DOM")]),t._v(" 事件的细节。"),s("code",[t._v("vue")]),t._v(" 中修饰符分为以下五种：表单修饰符、事件修饰符、鼠标按键修饰符、键值修饰符、v-bind 修饰符。")])]),t._v(" "),s("h3",{attrs:{id:"自定义指令"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#自定义指令"}},[t._v("#")]),t._v(" 自定义指令")]),t._v(" "),s("ul",[s("li",[s("strong",[t._v("指令系统")]),t._v("是计算机硬件的语言系统，也叫机器语言，它是系统程序员看到的计算机的主要属性。因此指令系统表征了计算机的基本功能决定了机器所要求的能力。在 "),s("code",[t._v("vue")]),t._v(" 中提供了一套为数据驱动视图更为方便的操作，这些操作被称为指令系统。")]),t._v(" "),s("li",[t._v("如何实现：注册一个自定义指令有全局注册（Vue.directive）与局部注册（directive）。")]),t._v(" "),s("li",[t._v("自定义指令也像组件那样"),s("strong",[t._v("存在钩子函数")]),t._v("：【1】"),s("code",[t._v("bind")]),t._v("：只调用一次，指令第一次绑定到元素时调用。在这里可以进行一次性的初始化设置。【2】"),s("code",[t._v("inserted")]),t._v("：被绑定元素插入父节点时调用 (仅保证父节点存在，但不一定已被插入文档中)。【3】"),s("code",[t._v("update")]),t._v("：所在组件的 "),s("code",[t._v("VNode")]),t._v(" 更新时调用，但是可能发生在其子 "),s("code",[t._v("VNode")]),t._v(" 更新之前。指令的值可能发生了改变，也可能没有。但是你可以通过比较更新前后的值来忽略不必要的模板更新。【4】"),s("code",[t._v("componentUpdated")]),t._v("：指令所在组件的 "),s("code",[t._v("VNode")]),t._v(" 及其子 "),s("code",[t._v("VNode")]),t._v(" 全部更新后调用。【5】"),s("code",[t._v("unbind")]),t._v("：只调用一次，指令与元素解绑时调用。")]),t._v(" "),s("li",[t._v("所有的钩子函数的"),s("strong",[t._v("参数")]),t._v("都有以下：【1】"),s("code",[t._v("el")]),t._v("：指令所绑定的元素，可以用来直接操作 "),s("code",[t._v("DOM")]),t._v("。【2】"),s("code",[t._v("binding")]),t._v("：一个对象，包含一些 "),s("code",[t._v("property")]),t._v("。【3】"),s("code",[t._v("vnode")]),t._v("："),s("code",[t._v("Vue")]),t._v(" 编译生成的虚拟节点。【4】"),s("code",[t._v("oldVnode")]),t._v("：上一个虚拟节点，仅在 "),s("code",[t._v("update")]),t._v(" 和 "),s("code",[t._v("componentUpdated")]),t._v(" 钩子中可用。（注意：除了 "),s("code",[t._v("el")]),t._v(" 之外，其它参数都应该是只读的，切勿进行修改）")])]),t._v(" "),s("h3",{attrs:{id:"过滤器"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#过滤器"}},[t._v("#")]),t._v(" 过滤器")]),t._v(" "),s("ul",[s("li",[t._v("过滤器的实质不改变原始数据，只是对数据进行加工处理后返回过滤后的数据再进行调用处理，我们也可以理解其为一个纯函数。（ps： "),s("code",[t._v("Vue3")]),t._v(" 中已废弃"),s("code",[t._v("filter")]),t._v("）")]),t._v(" "),s("li",[s("code",[t._v("vue")]),t._v(" 中的过滤器可以用在两个地方：双花括号插值和 "),s("code",[t._v("v-bind")]),t._v(" 表达式，过滤器应该被添加在 "),s("code",[t._v("JavaScript")]),t._v("表达式的尾部，由 “管道” 符号指示：")])]),t._v(" "),s("div",{staticClass:"language-vue line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-vue"}},[s("code",[t._v("// 在双花括号中\n{{ message | capitalize }}\n\n// 在 `v-bind` 中\n"),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("div")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token attr-name"}},[s("span",{pre:!0,attrs:{class:"token namespace"}},[t._v("v-bind:")]),t._v("id")]),s("span",{pre:!0,attrs:{class:"token attr-value"}},[s("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("rawId | formatId"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("div")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br")])]),s("ul",[s("li",[t._v("应用场景：比如单位转换、数字打点、文本格式化、时间格式化之类的等。")])]),t._v(" "),s("h3",{attrs:{id:"虚拟-dom"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#虚拟-dom"}},[t._v("#")]),t._v(" 虚拟 DOM")]),t._v(" "),s("ul",[s("li",[t._v("虚拟 DOM （"),s("code",[t._v("Virtual DOM")]),t._v(" ）这个概念相信大家都不陌生，从 "),s("code",[t._v("React")]),t._v(" 到 "),s("code",[t._v("Vue")]),t._v(" ，虚拟 "),s("code",[t._v("DOM")]),t._v(" 为这两个框架都带来了跨平台的能力（"),s("code",[t._v("React-Native")]),t._v(" 和 "),s("code",[t._v("Weex")]),t._v("）。实际上它只是一层对真实 "),s("code",[t._v("DOM")]),t._v(" 的抽象，以 "),s("code",[t._v("JavaScript")]),t._v("  对象 ("),s("code",[t._v("VNode")]),t._v(" 节点) 作为基础的树，用对象的属性来描述节点，最终可以通过一系列操作使这棵树映射到真实环境上。")]),t._v(" "),s("li",[t._v("为什么需要虚拟 DOM："),s("code",[t._v("DOM")]),t._v(" 是很慢的，其元素非常庞大，页面的性能问题，大部分都是由 "),s("code",[t._v("DOM")]),t._v(" 操作引起的，哪怕一个最简单的 "),s("code",[t._v("div")]),t._v(" 也包含着很多属性。【1】很多人认为虚拟 DOM 最大的优势是 diff 算法，减少 JavaScript 操作真实 DOM 的带来的性能消耗。虽然这一个虚拟 DOM 带来的一个优势，但并不是全部。【2】虚拟 DOM 最大的优势在于抽象了原本的渲染过程，实现了跨平台的能力，而不仅仅局限于浏览器的 DOM，可以是安卓和 IOS 的原生组件，可以是小程序，也可以是各种GUI。")])]),t._v(" "),s("h3",{attrs:{id:"diff-算法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#diff-算法"}},[t._v("#")]),t._v(" diff 算法")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("diff")]),t._v(" 算法是一种通过"),s("strong",[t._v("同层的树节点进行比较的高效算法")]),t._v("。其有两个特点：比较只会在同层级进行, 不会跨层级比较；在 diff 比较的过程中，循环从两边向中间比较。（同层比较、深度优先）")]),t._v(" "),s("li",[t._v("原理分析：当数据发生改变时，"),s("code",[t._v("set")]),t._v(" 方法会调用 "),s("code",[t._v("Dep.notify")]),t._v(" 通知所有订阅者 "),s("code",[t._v("Watcher")]),t._v("，订阅者就会调用 "),s("code",[t._v("patch")]),t._v(" 给真实的 "),s("code",[t._v("DOM")]),t._v(" 打补丁，更新相应的视图。"),s("code",[t._v("diff")]),t._v(" 的过程就是调用 "),s("code",[t._v("patch")]),t._v(" 函数，比较新旧节点，一边比较一边给真实的 "),s("code",[t._v("DOM")]),t._v(" 打补丁。")])]),t._v(" "),s("h3",{attrs:{id:"spa-单页应用-首屏加载速度慢怎么解决"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#spa-单页应用-首屏加载速度慢怎么解决"}},[t._v("#")]),t._v(" SPA（单页应用）首屏加载速度慢怎么解决")]),t._v(" "),s("ul",[s("li",[t._v("首屏加载：首屏时间（First Contentful Paint），指的是浏览器从响应用户输入网址地址，到首屏内容渲染完成的时间，此时整个网页不一定要全部渲染完成，但需要展示当前视窗需要的内容。首屏加载可以说是用户体验中"),s("strong",[t._v("最重要")]),t._v("的环节。")]),t._v(" "),s("li",[t._v("关于计算首屏时间：利用 "),s("code",[t._v("performance.timing")]),t._v(" 提供的数据；通过 "),s("code",[t._v("DOMContentLoad")]),t._v(" 或者 "),s("code",[t._v("performance")]),t._v(" 来计算出首屏时间。")]),t._v(" "),s("li",[t._v("加载慢的原因：网络延时问题、资源文件体积是否过大、资源是否重复发送请求去加载了、加载脚本的时候，渲染内容堵塞了。")]),t._v(" "),s("li",[t._v("解决方案：减小入口文件积、静态资源本地缓存、UI 框架按需加载、图片资源的压缩、组件重复打包、开启 GZip 压缩、使用 SSR。")])]),t._v(" "),s("h3",{attrs:{id:"vue-项目布署到服务器后刷新-404-问题"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#vue-项目布署到服务器后刷新-404-问题"}},[t._v("#")]),t._v(" vue 项目布署到服务器后刷新 404 问题")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("为什么 hash 模式下没有问题："),s("code",[t._v("router hash")]),t._v(" 模式我们都知道是用符号 # 表示的，如"),s("code",[t._v("website.com/#/login")]),t._v("，hash 的值为 "),s("code",[t._v("#/login")]),t._v("。它的特点在于："),s("code",[t._v("hash")]),t._v(" 虽然出现在 "),s("code",[t._v("URL")]),t._v(" 中，但不会被包括在 "),s("code",[t._v("HTTP")]),t._v(" 请求中，对服务端完全没有影响，因此改变 "),s("code",[t._v("hash")]),t._v(" 不会重新加载页面。"),s("code",[t._v("hash")]),t._v(" 模式下，仅 "),s("code",[t._v("hash")]),t._v(" 符号之前的内容会被包含在请求中，如 "),s("code",[t._v("website.com/#/login")]),t._v(" 只有 "),s("code",[t._v("website.com")]),t._v(" 会被包含在请求中 ，因此对于服务端来说，即使没有配置"),s("code",[t._v("location")]),t._v("，也不会返回404错误。")])]),t._v(" "),s("li",[s("p",[t._v("为什么 history 模式下有问题："),s("code",[t._v("Vue")]),t._v(" 是属于单页应用（single-page application），而 "),s("code",[t._v("SPA")]),t._v(" 是一种网络应用程序或网站的模型，所有用户交互是通过动态重写当前页面，不管我们应用有多少页面，构建物都只会产出一个 "),s("code",[t._v("index.html")]),t._v("。")])]),t._v(" "),s("li",[s("p",[t._v("解决方案：只需要配置将任意页面都重定向到 "),s("code",[t._v("index.html")]),t._v("，把路由交由前端处理。")])])]),t._v(" "),s("div",{staticClass:"language-nginx line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-nginx"}},[s("code",[s("span",{pre:!0,attrs:{class:"token directive"}},[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("server")])]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token directive"}},[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("listen")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("80")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token directive"}},[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("server_name")]),t._v("  www.xxx.com")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n  "),s("span",{pre:!0,attrs:{class:"token directive"}},[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("location")]),t._v(" /")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token directive"}},[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("index")]),t._v("  /data/dist/index.html")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token directive"}},[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("try_files")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$uri")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$uri")]),t._v("/ /index.html")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br")])]),s("h2",{attrs:{id:"_2-项目实践"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-项目实践"}},[t._v("#")]),t._v(" 2. 项目实践")]),t._v(" "),s("h3",{attrs:{id:"配置全局主题样式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#配置全局主题样式"}},[t._v("#")]),t._v(" 配置全局主题样式")]),t._v(" "),s("ul",[s("li",[t._v("依赖的包是 "),s("strong",[t._v("style-resources-loader、vue-cli-plugin-style-resources-loader")]),t._v("，目的是为了在单文件组件中使用时不再需要每次都去做引入操作。")])]),t._v(" "),s("div",{staticClass:"language-javascript line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 安装对应的依赖")]),t._v("\nnpm i style"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("resources"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("loader vue"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("cli"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("plugin"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("style"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("resources"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("loader "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),t._v("save"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("dev\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// vue.config.js 中配置")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("pluginOptions")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token string-property property"}},[t._v('"style-resources-loader"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("preProcessor")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"less"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("patterns")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"./src/styles/var.less"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 重启项目，文件中使用变量文件")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("style lang"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'less'")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 可以不用单个引用了，直接使用即可")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// @import '@/styles/var.less'")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("test "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("color")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" @primary"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("color"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("style"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br"),s("span",{staticClass:"line-number"},[t._v("12")]),s("br"),s("span",{staticClass:"line-number"},[t._v("13")]),s("br"),s("span",{staticClass:"line-number"},[t._v("14")]),s("br"),s("span",{staticClass:"line-number"},[t._v("15")]),s("br"),s("span",{staticClass:"line-number"},[t._v("16")]),s("br"),s("span",{staticClass:"line-number"},[t._v("17")]),s("br"),s("span",{staticClass:"line-number"},[t._v("18")]),s("br"),s("span",{staticClass:"line-number"},[t._v("19")]),s("br")])]),s("h3",{attrs:{id:"自动化注册-批处理脚本"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#自动化注册-批处理脚本"}},[t._v("#")]),t._v(" 自动化注册（批处理脚本）")]),t._v(" "),s("ul",[s("li",[s("strong",[t._v("require.context(directory, useSubdirectories, regExp)")]),t._v("：directory -- 表示检索的目录；useSubdirectories -- 表示是否检索子文件夹；regExp -- 匹配文件的正则表达式，一般是文件名。")]),t._v(" "),s("li",[t._v("使用 require.context 实现一些"),s("strong",[t._v("自动注册脚本，减少重复劳动")]),t._v("。")])])])}),[],!1,null,null,null);s.default=n.exports}}]);